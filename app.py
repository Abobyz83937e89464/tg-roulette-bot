from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3
import random
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8052679500:AAEobQqpYnUxbfATmWa1tBIN-LZClPOUCbw')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://raw.githack.com/Abobyz83937e89464/tg-roulette-bot/main/web_app/index.html')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, stars INTEGER, spins INTEGER)''')
    conn.commit()
    conn.close()

def get_user(user_id, username=""):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = c.fetchone()
    
    if not user:
        c.execute("INSERT INTO users (user_id, username, stars, spins) VALUES (?, ?, ?, ?)", 
                 (user_id, username, 10, 0))
        conn.commit()
        user = (user_id, username, 10, 0)
    
    conn.close()
    return user

def update_stars(user_id, stars):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("UPDATE users SET stars=? WHERE user_id=?", (stars, user_id))
    conn.commit()
    conn.close()

# –ü—Ä–∏–∑—ã —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_PRIZES = [
    {"name": "üí´ 5 –∑–≤–µ–∑–¥", "value": 5, "weight": 25},
    {"name": "‚ú® 10 –∑–≤–µ–∑–¥", "value": 10, "weight": 10},
    {"name": "‚≠ê 1 –∑–≤–µ–∑–¥–∞", "value": 1, "weight": 40},
    {"name": "üé≤ x2 –º–Ω–æ–∂–∏—Ç–µ–ª—å", "value": "multiplier", "weight": 15},
    {"name": "üòû –ù–∏—á–µ–≥–æ", "value": 0, "weight": 10}
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user(user.id, user.username)
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –≤ —á–∞—Ç–µ", callback_data="spin_chat")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Roulette, {user.first_name}!\n"
        f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[2]} –∑–≤–µ–∑–¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_data = get_user(user.id, user.username)
    
    if query.data == "balance":
        await query.answer(f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[2]} –∑–≤–µ–∑–¥", show_alert=True)
        
    elif query.data == "stats":
        await query.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Ä–∞—â–µ–Ω–∏–π: {user_data[3]}\n–ë–∞–ª–∞–Ω—Å: {user_data[2]} –∑–≤–µ–∑–¥", show_alert=True)
        
    elif query.data == "spin_chat":
        if user_data[2] < 1:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è!", show_alert=True)
            return
            
        # –õ–æ–≥–∏–∫–∞ —Å–ø–∏–Ω–∞
        total_weight = sum(prize["weight"] for prize in ROULETTE_PRIZES)
        random_value = random.randint(1, total_weight)
        current_weight = 0
        selected_prize = None
        
        for prize in ROULETTE_PRIZES:
            current_weight += prize["weight"]
            if random_value <= current_weight:
                selected_prize = prize
                break
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        new_balance = user_data[2] - 1
        prize_value = selected_prize["value"]
        
        if prize_value == "multiplier":
            multiplier = random.randint(2, 5)
            win_amount = 1 * multiplier
            new_balance += win_amount
            result_text = f"üé≤ –í—ã–ø–∞–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å x{multiplier}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –∑–≤–µ–∑–¥!"
        else:
            new_balance += prize_value
            result_text = f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {selected_prize['name']}!"
        
        update_stars(user.id, new_balance)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            f"{result_text}\n"
            f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∑–≤–µ–∑–¥\n\n"
            f"üé∞ –•–æ—Ç–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –µ—â–µ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –µ—â–µ", callback_data="spin_chat")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
            ])
        )

if __name__ == '__main__':
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –î–õ–Ø RAILWAY - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    application.run_polling()
